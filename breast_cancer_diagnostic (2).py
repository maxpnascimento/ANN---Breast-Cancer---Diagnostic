# -*- coding: utf-8 -*-
"""Breast Cancer - Diagnostic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D0TGXv9gKSNy5191lJPeRQKWSGKXaOOl

# **Breast Cancer - Diagnostic**
___
Artificial Neural Network for breast cancer diagnosis from a digitized image of a fine needle aspirate (FNA) of a breast mass. 


Data set: https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Diagnostic%29 
___
author: Max Nascimento

linkedin: linkedin.com/in/max-nascimento-4b19ba109

email: maxpnascimento@gmail.com
"""

#Libraries
import tensorflow as tf
import keras
import pandas as pd
import numpy as np

#Data

#Train
X_train = np.array(pd.read_csv("xtrain.csv", header=None))
Y_train = np.array(pd.read_csv("ytrain.csv", header=None))

#Test
X_test = np.array(pd.read_csv("xtest.csv", header=None))
Y_test = np.array(pd.read_csv("ytest.csv", header=None))

#Validation
X_validation = np.array(pd.read_csv("xvalidation.csv", header=None))
Y_validation = np.array(pd.read_csv("yvalidation.csv", header=None))

#Model ANN
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(32, activation=tf.nn.relu, input_shape=[30]),     #Input layer - 32 neurons - Relu activation
    tf.keras.layers.Dense(16, activation=tf.nn.relu),                       #Hidden layer - 16 neurons - Relu activation
    tf.keras.layers.Dense(4, activation=tf.nn.relu),                        #Hidden layer - 4 neurons  - Relu activation
    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)                      #Output Layer - 1 neuron - Sigmoid activation
])

model.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy',  metrics=['accuracy'])

model.summary()

#Train
train = model.fit(X_train, Y_train, batch_size = 1, epochs = 80, validation_data=(X_validation,Y_validation))

#Test model and model evaluation 

model.evaluate(X_test, Y_test)

#Confusion Matrix
test = model.predict(X_test)
cont = TP = FP = TN = FN = 0
for i in test:
  if i > 0.5:               #Positive predict  
    if Y_test[cont] == 1:       #True Positive
      TP += 1
    else:                       #False Positive
      FP += 1
  elif i <= 0.5:            #Negative predict 
    if Y_test[cont] == 0:       #True Negative
      TN += 1
    else:                       #False Negative
      FN += 1
  cont += 1

print(" ----------- \nConfusion Matrix:\n True Positive: ", TP, " - False Positive:", FP, " - True Negative: ", TN, " - False Negative: ", FN, "\n -----------")
print("Metrics:\n Precision = ", TP/(TP+FP), "\n Recall = ", TP/(TP+FN), "\n F1 score = ", 2*((TP/(TP+FP))*(TP/(TP+FN)))/((TP/(TP+FP))+(TP/(TP+FN))))